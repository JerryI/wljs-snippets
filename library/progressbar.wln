<|"notebook" -> <|"name" -> "Bestiary", "id" -> "floorwalker-c67f3", 
   "kernel" -> LocalKernel, "objects" -> <||>, "path" -> "/Users/kirill/Libra\
ry/Application \
Support/wljs-frontend/Packages/wljs-snippets/library/progressbar.wln", 
   "cell" :> Exit[], "date" -> DateObject[{2023, 12, 15, 12, 58, 
      53.079606`8.477502665221598}, "Instant", "Gregorian", 1.], 
   "symbols" -> <||>, "channel" -> WebSocketChannel[
     KirillBelov`WebSocketHandler`WebSocketChannel`$53], 
   "SelectedCell" -> 
    "348ca7f7-a1ec-4ba8-bd4d-7c879275d8585fa79a583170529f58"|>, 
 "cells" -> 
  {<|"id" -> "7d58050c-7269-4783-8bce-d08d797bfa2a5fa79a583170529f58", 
    "type" -> "input", "data" -> 
     ".md\n## Progress bar\nsnippet to track the progress in realtime", 
    "display" -> "codemirror", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "a28178d4-2a9a-45cd-96f1-0f5d189c607af58", "type" -> "output", 
    "data" -> "\n## Progress bar\nsnippet to track the progress in realtime", 
    "display" -> "markdown", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "f725f99f-17be-4f11-a061-8a231de26aa5", "type" -> "input", 
    "data" -> ".md\n### Usage\nCall this snippet from your notebook. It will \
insert a code for progressbar function.\n\n#### Example", 
    "display" -> "codemirror", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "e6b696ee-796d-4da8-aabc-6b6084f120bf", "type" -> "output", 
    "data" -> "\n### Usage\nCall this snippet from your notebook. It will \
insert a code for progressbar function.\n\n#### Example", 
    "display" -> "markdown", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "6a5f0a09-d00b-44e3-9590-983bc58e71865fa79a583170529f58", 
    "type" -> "input", "data" -> "With[{wat = progressIndicator[10]},\n  \
Table[wat[]; Pause[0.5], {i, 10}]\n]", "display" -> "codemirror", 
    "sign" -> "floorwalker-c67f3", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "652cdbb0-541d-4f41-a2d3-ff7f2efff5f65fa79a583170529f58", 
    "type" -> "input", "data" -> ".md\nUse `handler` for other function to \
take input of the crossbar position", "display" -> "codemirror", 
    "sign" -> "floorwalker-c67f3", "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "225de83e-48cd-4e61-b352-7a4d46204ff55fa79a583170529f58", 
    "type" -> "input", "data" -> ".md\n`progressIndicator[max_Real]` returns \
a handler function, that has to be called `max` times", 
    "display" -> "codemirror", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "ed4360d6-f688-4107-ada2-57c8f6473c5cf58", "type" -> "output", 
    "data" -> "\n`progressIndicator[max_Real]` returns a handler function, \
that has to be called `max` times", "display" -> "markdown", 
    "sign" -> "floorwalker-c67f3", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "f81e7f8b-4429-4c61-b1ff-f4632a74edd8", "type" -> "input", 
    "data" -> ".md\n__source code__", "display" -> "codemirror", 
    "sign" -> "floorwalker-c67f3", "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "e92c8f38-ce9a-4c8b-b2d0-8f449446e487", "type" -> "output", 
    "data" -> "\n__source code__", "display" -> "markdown", 
    "sign" -> "floorwalker-c67f3", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "348ca7f7-a1ec-4ba8-bd4d-7c879275d8585fa79a583170529f58", 
    "type" -> "input", "data" -> ".export\nprogressIndicator[max_] := \
Module[{p = 0, handler, cell, text = \"no data\", timer = AbsoluteTime[], \
prev = 0, speed = 0},\n  With[{},\n  \n    cell = \
ToString[Graphics[{EdgeForm[Black], White, Rectangle[{0,-1}, {1,1}], \
EdgeForm[Green], Green, Rectangle[{0,-1}, {p // Offload, 1}], Black, \
Text[text // Offload, {0.2, -0.25}]}, PlotRange->{{-0.01,1.01}, \
{-1.01,1.01}}, ImageSize->{400, 20}, ImagePadding->None, \
TransitionType->\"Linear\"], StandardForm];\n    \n    cell = CellPrint[cell, \
\"After\"->ParentCell[]];\n\n    handler[] := If[AbsoluteTime[] - timer > \
0.25, \n      p = p + 1.0/max;\n\n      If[speed === 0,\n        speed = \
(*FB[*)((AbsoluteTime[] - timer)(*,*)/(*,*)(p - prev))(*]FB*);\n      ];\n\n  \
    text = StringTemplate[\"`` minutes left\"][Round[(1.0 - \
p)(*FB[*)((1)(*,*)/(*,*)(60.0))(*]FB*)(speed = \
(*FB[*)((1)(*,*)/(*,*)(2))(*]FB*)((*FB[*)((AbsoluteTime[] - \
timer)(*,*)/(*,*)(p - prev))(*]FB*) + speed)), 0.1]];\n      \n      timer = \
AbsoluteTime[];\n      prev = p;\n    ];\n    \n    handler\n    \n  ]\n]", 
    "display" -> "codemirror", "sign" -> "floorwalker-c67f3", 
    "props" -> <|"hidden" -> False|>|>}, "serializer" -> "jsfn3"|>
