<|"notebook" -> <|"name" -> "Bestiary", "id" -> "lambaste-c27c7", 
   "kernel" -> LocalKernel, "objects" -> <||>, "path" -> "/Users/kirill/Libra\
ry/Application \
Support/wljs-frontend/Packages/wljs-snippets/library/manipulate1.wln", 
   "cell" :> Exit[], "date" -> DateObject[{2023, 12, 15, 12, 35, 
      28.777663`8.21163050401385}, "Instant", "Gregorian", 1.], 
   "symbols" -> <||>, "channel" -> WebSocketChannel[
     KirillBelov`WebSocketHandler`WebSocketChannel`$45], 
   "SelectedCell" -> "225de83e-48cd-4e61-b352-7a4d46204ff55fa79a285ba50e0"|>, 
 "cells" -> {<|"id" -> "7d58050c-7269-4783-8bce-d08d797bfa2a5fa79a285ba50e0", 
    "type" -> "input", "data" -> ".md\n## Manipulate 1 parameter\nA \
boilerplate for dynamic plot with experimental data", 
    "display" -> "codemirror", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "78161e9d-6d1a-4247-8230-8b7af8fcd5910e0", "type" -> "output", 
    "data" -> "\n## Manipulate 1 parameter\nA boilerplate for dynamic plot \
with experimental data", "display" -> "markdown", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "652cdbb0-541d-4f41-a2d3-ff7f2efff5f65fa79a285ba50e0", 
    "type" -> "input", "data" -> ".md\nUse `handler` for other function to \
take input of the crossbar position", "display" -> "codemirror", 
    "sign" -> "lambaste-c27c7", "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "00ec1f00-f5ac-4ef2-be00-acc3ffe94677", "type" -> "input", 
    "data" -> ".md\n## Usage\nCall this snippet (using `Cmd`/`Super` + `P`) \
in your notebook. It will insert the boilerplate code into a new cell", 
    "display" -> "codemirror", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "49cdff60-cdc3-472f-80cc-65a463e20aee", "type" -> "output", 
    "data" -> "\n## Usage\nCall this snippet (using `Cmd`/`Super` + `P`) in \
your notebook. It will insert the boilerplate code into a new cell", 
    "display" -> "markdown", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "225de83e-48cd-4e61-b352-7a4d46204ff55fa79a285ba50e0", 
    "type" -> "input", "data" -> ".md\n__Source code__", 
    "display" -> "codemirror", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> True|>|>, 
   <|"id" -> "0f839f65-efbf-4acc-8481-4c9b701c0c6a", "type" -> "output", 
    "data" -> "\n__Source code__", "display" -> "markdown", 
    "sign" -> "lambaste-c27c7", "props" -> <|"hidden" -> False|>|>, 
   <|"id" -> "348ca7f7-a1ec-4ba8-bd4d-7c879275d8585fa79a285ba50e0", 
    "type" -> "input", "data" -> ".export\nLeakyModule[{lines, slider, \
exp},\n  (* static data *)\n  exp = {{Pi,0}, {2Pi,0}};\n\n  (* slider ranges \
*)\n  slider = EventHandler[InputRange[1,10,1], Function[w,\n    \
Module[{function},\n      (* your test function *)\n      function = \
Function[x, Sin[x w]];\n\n      (* data preview *)\n      lines = {#, \
function[#]}& /@ Range[1,20,0.1];\n    ];\n  ]];\n\n  slider // EventFire;\n  \
\n  {\n    slider, \n    Graphics[{(*VB[*)(RGBColor[0.368417, 0.506779, \
0.709798])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3I\
SSxJTWMGyXMgyRcVTJv0VGXKdfsiw2kvp3eYP7AvOt4yw3vVtmf2AKMBH1E=\"*)(*]VB*), \
Line[lines // Offload], (*VB[*)(RGBColor[0.922526, 0.385626, \
0.209179])(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeGJAIcndyzs/JLwouTyxJzghJzS3I\
SSxJTWMGyXMgyRdd2frNLrT1rX3RHf35ayTW3bAv0nBnXJRw7JQ9AKbfHmU=\"*)(*]VB*), \
PointSize[0.04], Point[exp]}, Axes->True]\n  } // Column\n]", 
    "display" -> "codemirror", "sign" -> "lambaste-c27c7", 
    "props" -> <|"hidden" -> False|>|>}, "serializer" -> "jsfn3"|>
