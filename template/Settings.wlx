Checkbox = ImportComponent["UI/Checkbox.wlx"];
Knob     = ImportComponent["UI/Button.wlx"];

IfKeyExists[assoc_Association, list_List] := With[{},
    If[KeyExistsQ[assoc, #[[1]]], assoc[#[[1]]], #[[2]]] &/@ list
];

parseInt[any_String] := ToExpression[any]
parseInt[any_] := any 

Component[OptionsPattern[]] := With[{
    update = CreateUUID[],
    settings = OptionValue["Settings"],
    log = OptionValue["Messager"],
    onsave = OptionValue["OnSave"],

    initialValues = IfKeyExists[OptionValue["Settings"], {
        {"AIAssistantEndpoint", "https://api.openai.com"}, 
        {"AIAssistantModel", "gpt-4o"}, 
        {"AIAssistantMaxTokens", 70000}, 
        {"AIAssistantTemperature", 0.7},
        {"AIAssistantInitialPrompt", True}
    }]
},
    EventHandler[update, {
        "ResetKey" -> Function[Null,
            SystemCredential["OPENAI_API_KEY"] = .;
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ],

        "Prompt" -> Function[state,
            onsave[<|"AIAssistantInitialPrompt" -> state|>];
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ],

        "Endpoint" -> Function[value,
            onsave[<|"AIAssistantEndpoint" -> value|>];
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ],

        "Model" -> Function[value,
            onsave[<|"AIAssistantModel" -> value|>];
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ],

        "MaxTokens" -> Function[value,
            onsave[<|"AIAssistantMaxTokens" -> parseInt[value]|>];
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ],

        "Temperature" -> Function[value,
            onsave[<|"AIAssistantTemperature" -> parseInt[value]|>];
            EventFire[log, "Saved", "Type 'Reset chat' in the AI chat window to see changes"];
        ]
    }];

    <li class="px-0 py-4 sm:px-0">
        <div class="px-4 sm:px-0 pb-3 border-b border-gray-100">
            <h3 class="text-base font-semibold leading-7 text-gray-900 dark:text-gray-300">Snippets</h3>
            <p class="mt-1 max-w-2xl text-sm leading-6 text-gray-500 dark:text-gray-500"></p>
        </div>
        <div class="mt-4">   
            <span class="dark:text-gray-400">AI Assistant</span>
            <div class="block my-2 py-2">
                <StringRiffle>
                    <Knob Label={"Reset API Key"} Topic={"ResetKey"} Event={update} Class={"w15"}/>
                </StringRiffle>
            </div>
            <StringRiffle>
                <Checkbox Label={"Initial prompt"} Event={update} Topic={"Prompt"} Description={"Provides an additional information about the language and notebook cells, that improves the answers of GPT. It costs 3500 tokens for each new session."} Checked={initialValues[[5]]}/>
            </StringRiffle>
            <div class="pb-2 mt-2 gap-y-2 flex flex-col">
                <div class="rounded-md px-3 pb-3 pt-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-indigo-600">
                    <label for="endpoint" class="block text-xs font-medium text-gray-900 dark:text-gray-400">Endpoint</label>
                    <input type="text" id="endpoint" value="{initialValues[[1]]}" class="block w-full border-0 p-0 dark:bg-gray-700 text-gray-900 dark:text-gray-300 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6" placeholder="https://api.openai.com"/>
                    <WebUIEventListener Id={"endpoint"} Type={"blur"} Event={update} Pattern={"Endpoint"}/>
                </div> 
            </div> 
            <div class="pb-2 mt-2 mt-5 gap-y-2 flex flex-col">
                <div class="rounded-md px-3 pb-3 pt-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-indigo-600">
                    <label for="Model" class="block text-xs font-medium text-gray-900 dark:text-gray-400">Model</label>
                    <input type="text" id="Model" value="{initialValues[[2]]}" class="block w-full border-0 p-0 dark:bg-gray-700 text-gray-900 dark:text-gray-300 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6" value="" placeholder="gpt-4-turbo-preview"/>
                    <WebUIEventListener Id={"Model"} Type={"blur"} Event={update} Pattern={"Model"}/>
                </div> 
            </div> 
            <div class="pb-2 mt-2 mt-5 gap-y-2 flex flex-col">
                <div class="rounded-md px-3 pb-3 pt-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-indigo-600">
                    <label for="MaxTokens" class="block text-xs font-medium text-gray-900 dark:text-gray-400">Max tokens</label>
                    <input type="number" value="{initialValues[[3]]}" min="1000" max="100000" step="1000" id="MaxTokens" class="block w-full border-0 p-0 dark:bg-gray-700 text-gray-900 dark:text-gray-300 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"/>
                    <WebUIEventListener Id={"MaxTokens"} Type={"blur"} Event={update} Pattern={"MaxTokens"}/>
                </div> 
            </div> 
            <div class="pb-10 pb-10 mt-5 gap-y-2 flex flex-col">
                <div class="rounded-md px-3 pb-3 pt-2.5 shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-indigo-600">
                    <label for="Temperature" class="block text-xs font-medium text-gray-900 dark:text-gray-400">Temperature</label>
                    <input type="range" min="0.1" max="0.9" step="0.1" value="{initialValues[[4]]}" id="Temperature" class="block w-full border-0 p-0 dark:bg-gray-700 text-gray-900 dark:text-gray-300 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"/>
                    <WebUIEventListener Id={"Temperature"} Type={"blur"} Event={update} Pattern={"Temperature"}/>
                </div> 
            </div>                      
        </div> 
    </li>
]

Component