search[s_String] := With[{words = StringSplit[ToLowerCase[s], " "], indices = SnippetsDatabaseIndices},
    With[{results = Flatten[Function[word, With[{str = word},
        {
            MapIndexed[If[Length[#1]==0, Nothing, #2[[1]]]&, StringCases[Values @ indices, str~~___]],
            MapIndexed[If[Length[#1]==0, Nothing, #2[[1]]]&, StringCases[Values @ indices, __~~RegularExpression["[^\\w]"]~~str~~___]]
        }
    ]] /@ words]},
        If[StringLength[s] > 10,
            Join[{"InvokeAI"}, (Keys @ indices)[[ Keys[Reverse[SortBy[GroupBy[results, Identity], Length]]] ]]] // DeleteDuplicates
        ,
            (Keys @ indices)[[ Keys[Reverse[SortBy[GroupBy[results, Identity], Length]]] ]]
        ]
        
    ]
];


open[_, quickTags_, ClickActions_, path_, controls_, modals_, messanger_, localControls_, typeWritter_, keyListener_, emptyPanel_, aiPanel_, searchPanel_, fieldState_] := Module[{
    lastResults = Null, typed = False, 
    currentText = "",
    searchState = "Hidden",
    paneState = "Shown",
    position = 0,
    tagList = quickTags,
    timer = AbsoluteTime[]
},
With[{
    client = Global`$Client(*`*), 
    localTunnel = CreateUUID[]
},

With[{
    destroy := (
        Echo["Snippets >> removed"];
        EventFire[localControls, "Remove", <|"Client"->client|>];
        EventFire[keyListener, "Stop", <|"Client"->client|>];
        fieldState = False;
        ClearAll[lastResults];
        ClearAll[typed];
        ClearAll[currentText];
        ClearAll[tagList];
        ClearAll[position];
        ClearAll[searchState];
        EventRemove[typeWritter];
        EventRemove[searchPanel];
        paneState = "Shown";
    )
},

    If[fieldState, Return[]];
    fieldState = True;
    Echo["Open!"];

    EventHandler[ClickActions, {"Click" -> Function[data,
        Echo[data];
        EventFire[SnippetsEvents, data, <|"Client"->client, "Controls"->controls, "Modals"->modals, "Messanger"->messanger, "Path"->path, "Promt"->currentText|>];
        destroy;
    ]}];

    EventFire[localControls, "Load", <|"Client"->client|>];
    EventFire[localControls, "Rescan", <|"Client"->client|>];
    EventFire[keyListener, "Start", <|"Client"->client|>];

    EventHandler[keyListener, {"Pressed" -> Function[key,
        Switch[key,
            27,
                destroy
            ,    
            38,
                If[Length[tagList] == 0, Return[]];
                If[position > 0, position -= 1];
                EventFire[localControls, "Focus", <|"Position" -> position, "Client"->client|>];
            ,    
            40,
                If[Length[tagList] == 0, Return[]];
                If[position < Length[tagList], position += 1];
                EventFire[localControls, "Focus", <|"Position" -> position, "Client"->client|>];            
            ,
            13,
                If[position === 0 && StringLength[currentText] > 7, 
                    Echo["Send data to AI"];
                    EventFire[SnippetsEvents, "InvokeAI", <|"Client"->client, "Controls"->controls, "Modals"->modals, "Messanger"->messanger, "Path"->path, "Promt"->currentText|>];
                    destroy;
                ,
                    If[Length[tagList] == 0, Return[]];
                    If[position < 1, Return[]];
                    Echo[tagList[[position]]];
                    EventFire[SnippetsEvents, tagList[[position]], <|"Client"->client, "Controls"->controls, "Modals"->modals, "Messanger"->messanger, "Path"->path, "Promt"->currentText|>];
                    destroy;
                ];
            ,
            _,
                Echo[key]
        ];
    ]}];


    EventHandler[typeWritter, {"Type" -> Function[text,
        If[StringLength[text] < 3,
            If[paneState === "Hidden", 
                
                EventFire[emptyPanel, "Show", <|"Client"->client|>];
                paneState = "Shown";
                Echo[paneState];
            ];
            EventFire[searchPanel, "Remove", <|"Client"->client|>];
            tagList = quickTags;
            position = 0;
            searchState = "Hidden";
        ,
            If[paneState === "Shown", 
                EventFire[emptyPanel, "Hide", <|"Client"->client|>];
                paneState = "Hidden";
                Echo[paneState];
            ];

            
            
        ];

        currentText = text;

        Echo[text];
        If[AbsoluteTime[] - timer > 0.3,
            timer = AbsoluteTime[];
            With[{
                results = If[StringLength[text] =!= 0, search[text], Keys @ SnippetsDatabase]
            },
                    If[searchState === "Hidden",
                        searchState = "Shown";
                        lastResults = Null;
                    ];

                    If[lastResults =!= results,
                        Echo["Update panel"];
                        Echo[results];
                        tagList = results;
                        position = 0;
                        EventFire[searchPanel, "Load", <|"Data"->results, "Client"->client|>];
                        EventFire[localControls, "Rescan", <|"Client"->client|>];
                        lastResults = results;
                    ];
            ]
        ];

    ]}];
] ] ];

SetAttributes[open, HoldRest];

QuickActions   := ImportComponent["Components/QuickActions.wlx"];
RecentItems     = ImportComponent["Components/Recent.wlx"];

SearchResults   = ImportComponent["Components/SearchResults.wlx"];

Component[OptionsPattern[]] := 
Module[{
    fieldState = False
},
With[{
    Title = FileNameTake[OptionValue["Path"]],
    Controls = OptionValue["Controls"],
    Path = OptionValue["Path"],
    Messanger = OptionValue["Messanger"],
    Modals = OptionValue["Modals"],
    quickTags = {"newFile", "renameNotebook"},
    LocalControls = CreateUUID[],
    emptyPanel = CreateUUID[],
    aiPanel = CreateUUID[],
    ClickActions = CreateUUID[],
    resultsPanel = CreateUUID[],
    typeWritter = CreateUUID[],
    keyListener = CreateUUID[],
    searchPanel = CreateUUID[]
},
    EventHandler[EventClone[Controls], {"open_snippets" -> Function[Null, EventFire[LocalControls, "Open", True]]}];

    EventHandler[LocalControls, {"Open" -> (open[#, quickTags, ClickActions, Path, Controls, Modals, Messanger, LocalControls, typeWritter, keyListener, emptyPanel, aiPanel, searchPanel, fieldState]&)}];

<div class="relative grow rounded-md bg-gray-100 dark:bg-gray-700">
    <style>
        #canvas-palette-back > canvas {
            filter: blur(15px);
        }
    </style>
    <div class="absolute w-full h-full rounded-md overflow-hidden" id="canvas-palette-back">
    </div>
    <div id="palette" class="grow relative p-1 items-center flex rounded-md 0 h-7 owin:h-6 owin:mt-1 win:h-6 win:mt-1 linux:h-6 linux:mt-1 pl-3  pr-2 text-left text-gray-500  ring-1 ring-inset ring-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-xs sm:leading-6 dark:ring-gray-600 ">
        <svg id="palette-ico" class="hidden pointer-events-none mr-2 h-4 w-4 text-gray-900 dark:text-gray-400 text-opacity-40" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
        </svg>
        <input type="text" id="palette-field" class="leading-6 text-sm text-gray-400 bg-transparent w-full border-0 placeholder:text-gray-400 focus:ring-0" style="outline:unset" placeholder="{Title}"/>
        <style>
            .nooline {
                outline: unset;
            }
        </style>
        <WebUILazyLoad Event={LocalControls}>
            <div id="palette-list" class="absolute top-0 mt-10 right-0 left-0 w-full">
               <div class="mx-auto max-w-2xl transform divide-y divide-gray-500 dark:divine-gray-300 divide-opacity-10 overflow-hidden rounded-md bg-gray-100 bg-opacity-80 shadow-md  backdrop-blur backdrop-filter transition-all bg-d9 text-left text-gray-500 w-70 ring-1 ring-inset ring-gray-400 pb-1 dark:bg-gray-700">
                  <ul class="max-h-80 scroll-py-2 divide-y divide-gray-500 divide-opacity-10 overflow-y-auto sc-b">
                    <WebUILazyLoad Event={searchPanel}>
                        <SearchResults Data={WebUILazyLoadDataProvided}/>
                    </WebUILazyLoad>               
                    <WebUIRefresh Event={emptyPanel}>
                         <QuickActions List={ quickTags }/>
                    </WebUIRefresh>     
                  </ul>
               </div>
            </div>
        </WebUILazyLoad>

        <WebUIEventListener Type={"click"} Id={"palette"} Pattern={"Open"} Event={LocalControls} />   
        <WebUIEventListener Type={"input"} Id={"palette-field"} Pattern={"Type"} Event={typeWritter} />  

        <WebUIKeyListener  Pattern={"Pressed"} Event={keyListener} />

        <WebUIJSBind Event={LocalControls}>
            const ico = document.getElementById("palette-ico");
            const field = document.getElementById("palette-field");
            const palette = document.getElementById('palette');

            let storage;

            this.on('Load', () => {
                ico.classList.remove('hidden');
                field.focus();
            });

            this.on('Remove', () => {
                ico.classList.add('hidden');
                field.value = '';
                field.blur();
            });

            this.on('Rescan', () => {
                storage = palette.querySelectorAll('[tag]');
                const btags = palette.querySelectorAll('[btag]');
                for (let i=0; i<storage.length; ++i) {
                    storage[i].addEventListener('click', (event) => {
                        console.log(['<ClickActions/>', '"'+storage[i].getAttribute("tag")+'"', 'Click']);
                        server.emitt('<ClickActions/>', '"'+storage[i].getAttribute("tag")+'"', 'Click');
                        event.stopPropagation();
                    });
                }
                //buttons ans etc
                for (let i=0; i<btags.length; ++i) {
                    btags[i].addEventListener('click', (event) => {
                        console.log(['<ClickActions/>', '"'+btags[i].getAttribute("tag")+'"', 'Click']);
                        server.emitt('<ClickActions/>', '"'+btags[i].getAttribute("btag")+'"', 'Click');
                        event.stopPropagation();
                    });
                }
            });

            this.on('Focus', async (data) => {
                const assoc = await interpretate(data, {hold: true});
                const pos = await interpretate(assoc.Position, {});
                if (pos - 1 < 0) {
                    field.focus();
                    return;
                }
                console.log(pos);
                storage[pos-1].focus();
            });

        </WebUIJSBind>
    </div>
</div>    
]]

Options[Component] = {"Path"->"", "Parameters"->"", "Modals"->"", "AppEvent"->"", "Controls"->"", "Messanger"->""}


Component

